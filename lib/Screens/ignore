

import 'dart:math';

import 'package:flutter/material.dart';

import 'package:just_audio/just_audio.dart';
import 'package:just_audio_background/just_audio_background.dart';
import 'package:marquee_text/marquee_text.dart';
import 'package:music_player/db/db%20functions/add_song_list.dart';
import 'package:music_player/db/song_list_model.dart';
import 'package:music_player/playlist_db/playlist_controller.dart';
import 'package:music_player/recent_db/recent_controller.dart';

import 'package:music_player/screens/screen_home/screen_hoem.dart';
import 'package:music_player/variables/varibles.dart';
import 'package:on_audio_query/on_audio_query.dart';

// ignore: must_be_immutable
class PlayingSong extends StatefulWidget {
  PlayingSong({super.key, required this.songs, required this.songIndex});
  List<SongListModel> songs;
  int songIndex;

  @override
  State<PlayingSong> createState() => _PlayingSongState();
}

class _PlayingSongState extends State<PlayingSong> {
  Duration songDuration = const Duration();
  Duration songPossition = const Duration();
  List<int> songToPlaylist = [];

  TextEditingController playListNameController = TextEditingController();
  @override
  void initState() {
    super.initState();
    isPlaying = true;
    playaudio();
    RecentDbController.addSongsToRecent(widget.songs[widget.songIndex].songid);
  }

  void playaudio() {
    RecentDbController.addSongsToRecent(widget.songs[widget.songIndex].songid);

    try {
      play.setAudioSource(AudioSource.uri(
        Uri.parse(widget.songs[widget.songIndex].uri.toString()),
        tag: MediaItem(
          // Specify a unique ID for each media item:
          id: '${widget.songs[widget.songIndex].id}',
          // Metadata to display in the notification:
          album: "${widget.songs[widget.songIndex].album}",
          title: widget.songs[widget.songIndex].name,
          artUri: Uri.parse(widget.songs[widget.songIndex].uri.toString()),
        ),
      ));

      play.play();
    } catch (d) {
      log(e);
    }

    play.durationStream.listen((d) {
      if (mounted) {
        setState(() {
          songDuration = d!;
        });
      }
    });

    play.positionStream.listen((p) {
      if (mounted) {
        setState(() {
          songPossition = p;
        });
      }
    });

    // ignore: avoid_types_as_parameter_names, non_constant_identifier_names
    play.playerStateStream.listen((PlayerState) {
      isPlaying = PlayerState.playing;
      PlayerState.processingState;
    });

    play.processingStateStream.listen((event) {
      if (event == ProcessingState.completed) {
        playnext();
      }
    });
  }

  // SongModel song;
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: color.backGroundColor,
      appBar: AppBar(
        elevation: 0,
        backgroundColor: color.backGroundColor,
      ),
      body: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Center(
            child: Container(
              decoration: BoxDecoration(
                  color: color.secondaryColor,
                  borderRadius: BorderRadius.circular(10)),
              height: 250,
              width: 250,
              child: QueryArtworkWidget(
                id: widget.songs[widget.songIndex].id,
                type: ArtworkType.AUDIO,
                artworkHeight: double.infinity,
                artworkWidth: double.infinity,
                nullArtworkWidget: Icon(
                  Icons.music_note,
                  color: color.impColor,
                  size: 100,
                ),
              ),
            ),
          ),
          Container(
            width: double.infinity,
            height: 70,
            padding: const EdgeInsets.all(25),
            child: Align(
                child: MarqueeText(
                    speed: 23,
                    text: TextSpan(
                      text: widget.songs[widget.songIndex].name,
                      style: TextStyle(
                        color: color.textColor,
                        // overflow: TextOverflow.ellipsis,
                        fontSize: 20,
                      ),
                    ))),
          ),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceAround,
            children: [
              IconButton(
                  onPressed: () {
                    isShuffeling = !isShuffeling;
                    setState(() {});
                  },
                  icon: Icon(
                    Icons.shuffle,
                    color: isShuffeling ? color.impColor : color.textColor,
                    size: 40,
                  )),
              const SizedBox(
                height: 40,
              ),
              IconButton(
                onPressed: () async {
                  likeDbFuction(widget.songs[widget.songIndex]);
                  setState(() {});
                },
                icon: Icon(
                  widget.songs[widget.songIndex].isLiked
                      ? Icons.favorite
                      : Icons.favorite_border_outlined,
                  color: widget.songs[widget.songIndex].isLiked
                      ? color.impColor
                      : color.textColor,
                  size: 40,
                ),
              ),
              const SizedBox(
                width: 40,
              ),
              IconButton(
                  onPressed: () {
                    showModalBottomSheet(
                        context: context,
                        builder: (context) {
                          return Container(
                            height: 400,
                            color: color.backGroundColor,
                            child: Column(
                              children: [
                                ListTile(
                                  onTap: () {
                                    showDialog(
                                        context: context,
                                        builder: (ctx) => SizedBox(
                                              height: 10,
                                              child: AlertDialog(
                                                title: const Text(
                                                    'Add new playlist'),
                                                content: TextField(
                                                  controller:
                                                      playListNameController,
                                                  decoration:
                                                      const InputDecoration(
                                                          hintText:
                                                              'Playlist Name'),
                                                ),
                                                actions: [
                                                  TextButton(
                                                      onPressed: () async {
                                                        songToPlaylist.add(
                                                            widget.songIndex);
                                                        bool plyContain =
                                                            await PlayListController
                                                                .playlistFindDuplicates(
                                                                    playListNameController
                                                                        .text);

                                                        if (plyContain ==
                                                            false) {
                                                          PlayListController
                                                              .addPlaylist(
                                                                  playlistName:
                                                                      playListNameController
                                                                          .text,
                                                                  songIds:
                                                                      songToPlaylist);
                                                        } else {
                                                          const SnackBar(
                                                              content: Text(
                                                                  'Playlist alrady exist'));
                                                        }
                                                        // ignore: use_build_context_synchronously
                                                        Navigator.pop(context);
                                                      },
                                                      child: const Text('Add')),
                                                  TextButton(
                                                      onPressed: () {
                                                        Navigator.pop(context);
                                                      },
                                                      child:
                                                          const Text('Cancel'))
                                                ],
                                              ),
                                            ));
                                  },
                                  leading: Icon(
                                    Icons.playlist_add,
                                    color: color.impColor,
                                  ),
                                  title: Text(
                                    'Create Playlist',
                                    style: TextStyle(color: color.textColor),
                                  ),
                                ),
                                Expanded(
                                  child: FutureBuilder(
                                    future: PlayListController.getPlaylist(),
                                    builder: (context, snapshot) {
                                      if (snapshot.data == null) {
                                        return const Center(
                                            child: CircularProgressIndicator());
                                      } else if (snapshot.data!.isEmpty) {
                                        return Center(
                                            child: Text(
                                          'No Playlist found',
                                          style:
                                              TextStyle(color: color.textColor),
                                        ));
                                      } else {
                                        return ListView.builder(
                                            itemCount: snapshot.data!.length,
                                            itemBuilder: (cts, index) {
                                              return ListTile(
                                                onTap: () {
                                                  PlayListController
                                                      .addSongsToPlaylist(
                                                          widget.songs[
                                                              widget.songIndex],
                                                          snapshot.data![index]
                                                              .key);
                                                  ScaffoldMessenger.of(context)
                                                      .showSnackBar(
                                                          const SnackBar(
                                                              content: Text(
                                                                  'item added')));
                                                  Navigator.pop(context);
                                                },
                                                leading: Icon(
                                                  Icons.playlist_play,
                                                  color: color.impColor,
                                                ),
                                                title: Text(
                                                  snapshot.data![index].name,
                                                  style: TextStyle(
                                                      color: color.textColor),
                                                ),
                                              );
                                            });
                                      }
                                    },
                                  ),
                                ),
                              ],
                            ),
                          );
                        });
                  },
                  icon: Icon(
                    Icons.add,
                    color: color.textColor,
                    size: 40,
                  )),
            ],
          ),
          Slider(
            min: const Duration(microseconds: 0).inSeconds.toDouble(),
            value: songPossition.inSeconds.toDouble(),
            max: songDuration.inSeconds.toDouble(),
            onChanged: (newvlue) {
              setState(() {
                if (songDuration == songPossition) {
                  widget.songIndex = widget.songIndex + 1;
                }
                changeSeconds(newvlue.toInt());
                newvlue = newvlue;
              });
            },
            activeColor: color.impColor,
          ),
          Padding(
            padding: const EdgeInsets.all(10.0),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  formatDuration(songDuration),
                  style: TextStyle(color: color.textColor),
                ),
                Text(
                  formatDuration(songPossition),
                  style: TextStyle(color: color.textColor),
                )
              ],
            ),
          ),
          const SizedBox(
            height: 0,
          ),
          SizedBox(
            width: 200,
            height: 80.1,
            child: Row(
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                IconButton(
                    onPressed: () {
                      if (widget.songIndex == 0) {
                        widget.songIndex = widget.songs.length;
                      }
                      setState(() {
                        widget.songIndex--;
                        playaudio();
                      });
                    },
                    icon: Icon(
                      Icons.skip_previous,
                      color: color.textColor,
                      size: 55,
                    )),
                const SizedBox(
                  width: 18,
                ),
                InkWell(
                  onTap: () {
                    if (isPlaying) {
                      setState(() {
                        play.pause();
                        isPlaying = !isPlaying;
                      });
                    } else {
                      setState(() {
                        playaudio();
                        isPlaying = !isPlaying;
                      });
                    }
                  },
                  child: Container(
                    decoration: BoxDecoration(
                        color: color.impColor,
                        borderRadius: BorderRadius.circular(80)),
                    height: 80,
                    width: 80,
                    child: Center(
                      child: Icon(
                        isPlaying ? Icons.pause : Icons.play_arrow,
                        color: color.textColor,
                        size: 40,
                      ),
                    ),
                  ),
                ),
                IconButton(
                    onPressed: () {
                      playnext();
                    },
                    icon: Icon(
                      Icons.skip_next,
                      color: color.textColor,
                      size: 55,
                    )),
              ],
            ),
          )
        ],
      ),
    );
  }

  void changeSeconds(int seconds) {
    Duration duration = Duration(seconds: seconds);
    play.seek(duration);
  }

  void playnext() {
    if (isShuffeling) {
      Random r = Random();
      widget.songIndex = r.nextInt(widget.songs.length);
      playaudio();
      setState(() {});
    } else if (nextSong != -1) {
      widget.songIndex = nextSong;
      nextSong = -1;
      playaudio();
    } else {
      if (widget.songIndex == widget.songs.length - 1) {
        widget.songIndex = 0;

        print(widget.songIndex);
      }
      setState(() {
        if (widget.songIndex == widget.songs.length) {
          widget.songIndex = -1;
        }
        // play.pause();
        widget.songIndex++;
        playaudio();
      });
    }
  }

  String formatDuration(Duration duration) {
    String twoDigits(int n) => n.toString().padLeft(2, "0");
    String twoDigitMinutes = twoDigits(duration.inMinutes.remainder(60));
    String twoDigitSeconds = twoDigits(duration.inSeconds.remainder(60));
    return "$twoDigitMinutes:$twoDigitSeconds";
  }
}







//////// home 

    
import 'package:flutter/material.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:galaxy/Screens/Allsongs.dart';

import 'package:galaxy/Screens/mianscreens/bodyHome.dart';

import 'package:galaxy/Screens/nowplaying.dart';
import 'package:galaxy/colors/colors.dart';
import 'package:galaxy/database/db_model.dart';
import 'package:galaxy/database/fav_function.dart';

import 'package:galaxy/provider/provider.dart';

import 'package:galaxy/Screens/visible.dart';
import 'package:galaxy/database/db_functions.dart';

import 'package:google_fonts/google_fonts.dart';
import 'package:just_audio/just_audio.dart';
import 'package:on_audio_query/on_audio_query.dart';
import 'package:page_transition/page_transition.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:provider/provider.dart';

final audioplayer = AudioPlayer();

class MainHome extends StatefulWidget {

  MainHome({super.key});

  @override
  State<MainHome> createState() => _MainHomeState();
}

class _MainHomeState extends State<MainHome> {
  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    requestPermission();
  }

  void requestPermission() {
    Permission.storage.request();
  }

  Future<List<MusicModel>> fetchSongsfromDb() async {
    List<SongModel> songlist = await _audioQuery.querySongs(
      sortType: null,
      orderType: OrderType.ASC_OR_SMALLER,
      uriType: UriType.EXTERNAL,
      ignoreCase: true,
    );
    addSongToDb(songs: songlist);

    return getAllSongs();
  }

  final _audioQuery = OnAudioQuery();

  playSong(String? uri) {
    try {
      audioplayer.play();

      audioplayer.setAudioSource(AudioSource.uri(Uri.parse(uri!)));
    } on Exception {}
  }




  

  @override
  Widget build(BuildContext context) {
    MediaQueryData mediaQuerry = MediaQuery.of(context);
    return Scaffold(
      backgroundColor: Colormanager.scaffoldcolor,
      body: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Container(
            decoration: BoxDecoration(
                color:Colormanager.container, border: Border.all(color: Colors.black)),
            height: mediaQuerry.size.height * 0.07,
            child: Row(
              children: [
                SizedBox(
                  width: mediaQuerry.size.width * 0.04,
                ),
                Builder(builder: (context) {
                  return InkWell(
                      onTap: () {
                        Home.scaffoldKey.currentState?.openDrawer();
                      },
                      child:  Icon(
                        Icons.menu,
                        color:Colormanager.icons ,
                        size: 30,
                      ));
                }),
                SizedBox(
                  width: mediaQuerry.size.width * 0.28,
                ),
                Text(
                  'Home',
                  style: TextStyle(
                      color: Colormanager.titleText,
                      fontWeight: FontWeight.w500,
                      fontSize: 20),
                ),
              ],
            ),
          ),

          // stack starting
          Stack(
            children: [
              Container(
                height: mediaQuerry.size.height * 0.2,
                decoration: BoxDecoration(
                    color:Colormanager.container,
                    borderRadius: BorderRadius.only(
                        bottomLeft: Radius.circular(50),
                        bottomRight: Radius.circular(50))),
              ),
              Padding(
                padding: const EdgeInsets.only(top: 30, left: 35),
                child: Container(
                  decoration: BoxDecoration(
                      color: Colors.transparent,
                      borderRadius: BorderRadius.circular(20)),
                  height: mediaQuerry.size.height * 0.3,
                  width: mediaQuerry.size.width * 0.6,
                  child: ClipRRect(
                      borderRadius: BorderRadius.circular(30),
                      child: Image.network(
                        'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT9DzpVGpCf2UMKt0ERDjTekp0bXkayaC0uzA&usqp=CAU',
                        fit: BoxFit.cover,
                      )),
                ),
              ),
              Positioned(
                left: 40,
                child: Padding(
                  padding: const EdgeInsets.only(top: 30, left: 35),
                  child: Container(
                    decoration: BoxDecoration(
                        color: Colors.transparent,
                        borderRadius: BorderRadius.circular(20)),
                    height: mediaQuerry.size.height * 0.3,
                    width: mediaQuerry.size.width * 0.6,
                    child: ClipRRect(
                        borderRadius: BorderRadius.circular(30),
                        child: Image.network(
                          'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSRskycHBe40Fu0JO58uFs8F0_CwzhP6R5w3w&usqp=CAU',
                          fit: BoxFit.cover,
                        )),
                  ),
                ),
              ),
              Positioned(
                left: 80,
                child: Padding(
                    padding: const EdgeInsets.only(top: 30, left: 35),
                    child: Container(
                      decoration: BoxDecoration(
                          color: Colors.green,
                          borderRadius: BorderRadius.circular(50)),
                      height: mediaQuerry.size.height * 0.3,
                      width: mediaQuerry.size.width * 0.6,
                      child: ClipRRect(
                          borderRadius: BorderRadius.circular(30),
                          child: Image.network(
                            'https://e1.pxfuel.com/desktop-wallpaper/433/147/desktop-wallpaper-steam-workshop-xxxtentacion-animated-backgrounds-red-led-xxxtentacion-animated.jpg',
                            fit: BoxFit.cover,
                          )),
                    )),
              ),
            ],
          ),
          Padding(
            padding: const EdgeInsets.only(left: 43, right: 40, top: 20),
            child: Expanded(
              child: Column(
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        'Your songs',
                        style: GoogleFonts.lato(
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                            color:Colormanager.maintext),
                      ),
                      SizedBox(width: mediaQuerry.size.width * 0.1),
                      InkWell(
                          onTap: () {
                            Navigator.of(context).push(MaterialPageRoute(
                                builder: (context) => Allsongs()));
                          },
                          child: Icon(Icons.remove_red_eye)),
                    ],
                  ),
                ],
              ),
            ),
          ),
          // SizedBox(height: mediaQuerry.size.height*0.01,),
          // song fetching
          // LIst view for showing swtched screens ...

          FutureBuilder<List<MusicModel>>(
            future: fetchSongsfromDb(),
            builder: (context, items) {
              if (items.data == null) {
                return Center(child: const CircularProgressIndicator());
              } else if (items.data!.isEmpty) {
                return const Center(child: Text('item not found'));
              } else {
                return Expanded(
                  child: Padding(
                    padding: const EdgeInsets.only(left: 20, right: 20),
                    child: ListView.builder(
                      physics:BouncingScrollPhysics(parent: AlwaysScrollableScrollPhysics()),
                      itemBuilder: (context, index) {
                        return Padding(
                          padding: const EdgeInsets.all(8.0),
                          child: Container(
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(10),
                              color:Colormanager.listtile,
                            ),
                            child: ListTile(
                              leading: ClipRRect(
                                  borderRadius: BorderRadius.circular(3),
                                  child: QueryArtworkWidget(
                                    artworkQuality: FilterQuality.high,
                                    quality: 100,
                                    artworkFit: BoxFit.cover,
                                    id: items.data![index].songid,
                                    type: ArtworkType.AUDIO,
                                    artworkBorder: const BorderRadius.all(
                                        Radius.circular(5)),
                                  )),
                              title: Text(
                                items.data![index].songname,
                                maxLines: 1,
                                overflow: TextOverflow.ellipsis,
                                style:  TextStyle(
                                    color: Colormanager.text,
                                    fontWeight: FontWeight.bold),
                              ),
                              subtitle: Text(
                                items.data![index].artistname ?? 'No Artist',
                                style:  TextStyle(
                                    color: Colormanager.text,
                                    fontWeight: FontWeight.w300),
                              ),
                              trailing: InkWell(
                                  onTap: () {
                                    showModalBottomSheet(
                                        shape: RoundedRectangleBorder(
                                            borderRadius: BorderRadius.only(
                                                topLeft: Radius.circular(40),
                                                topRight: Radius.circular(40))),
                                        context: context,
                                        builder: (context) {
                                          return Container(
                                            height:
                                                mediaQuerry.size.height * 0.40,
                                            decoration: BoxDecoration(
                                                color: Colors.black,
                                                borderRadius: BorderRadius.only(
                                                    topLeft:
                                                        Radius.circular(40),
                                                    topRight:
                                                        Radius.circular(40))),
                                            child: Padding(
                                              padding: const EdgeInsets.all(10),
                                              child: Column(
                                                children: [
                                                  SizedBox(
                                                    height: mediaQuerry
                                                            .size.height *
                                                        0.05,
                                                  ),
                                                  Row(
                                                    children: [
                                                      SizedBox(
                                                        width: mediaQuerry
                                                                .size.width *
                                                            0.06,
                                                      ),
                                                      Icon(
                                                        Icons.add_circle,
                                                        size: 30,
                                                        color: Colormanager.sheeticon,
                                                      ),
                                                      SizedBox(
                                                        width: mediaQuerry
                                                                .size.width *
                                                            0.05,
                                                      ),
                                                      Text('Add to playlist',
                                                          style: TextStyle(
                                                            color:Colormanager.sheetText,
                                                            fontWeight:
                                                                FontWeight.bold,
                                                            fontSize: 20,
                                                          ))
                                                    ],
                                                  ),
                                                  SizedBox(
                                                    height: mediaQuerry
                                                            .size.height *
                                                        0.03,
                                                  ),
                                                  Row(
                                                    children: [
                                                      SizedBox(
                                                        width: mediaQuerry
                                                                .size.width *
                                                            0.06,
                                                      ),
                                                      Icon(
                                                        Icons.do_not_disturb_on,
                                                        size: 30,
                                                        color: Colormanager.sheeticon,
                                                      ),
                                                      SizedBox(
                                                        width: mediaQuerry
                                                                .size.width *
                                                            0.05,
                                                      ),
                                                      Text(
                                                          'Remove From PLaylist',
                                                          style: TextStyle(
                                                            color: Colormanager.sheetText,
                                                            fontWeight:
                                                                FontWeight.bold,
                                                            fontSize: 20,
                                                          ))
                                                    ],
                                                  ),
                                                  SizedBox(
                                                    height: mediaQuerry
                                                            .size.height *
                                                        0.03,
                                                  ),
                                                  Row(
                                                    children: [
                                                      SizedBox(
                                                        width: mediaQuerry
                                                                .size.width *
                                                            0.06,
                                                      ),
                                                      FaIcon(
                                                        FontAwesomeIcons.music,
                                                        color: Colormanager.sheeticon,
                                                      ),
                                                      SizedBox(
                                                        width: mediaQuerry
                                                                .size.width *
                                                            0.05,
                                                      ),
                                                      Text('Go to Lyrics',
                                                          style: TextStyle(
                                                            color: Colormanager.sheetText,
                                                            fontWeight:
                                                                FontWeight.bold,
                                                            fontSize: 20,
                                                          ))
                                                    ],
                                                  ),
                                                  SizedBox(
                                                    height: mediaQuerry
                                                            .size.height *
                                                        0.03,
                                                  ),
                                                  Row(
                                                    children: [
                                                      SizedBox(
                                                        width: mediaQuerry
                                                                .size.width *
                                                            0.06,
                                                      ),
                                                      Icon(
                                                        Icons.queue_music,
                                                        size: 35,
                                                        color: Colormanager.sheeticon,
                                                      ),
                                                      SizedBox(
                                                        width: mediaQuerry
                                                                .size.width *
                                                            0.05,
                                                      ),
                                                      Text('Go to Playlist',
                                                          style: TextStyle(
                                                            color: Colormanager.sheetText,
                                                            fontWeight:
                                                                FontWeight.bold,
                                                            fontSize: 20,
                                                          ))
                                                    ],
                                                  ),
                                                  SizedBox(
                                                    height: mediaQuerry
                                                            .size.height *
                                                        0.03,
                                                  ),
                                                  favSongs.contains(items.data![index].songid)?
                                                  InkWell(
                                                    onTap: (){
                                                      removeLikedSong(items.data![index].songid);
                                                      ifLickd();

                                                      


                                                      setState(() {
                                                        
                                                      });
                                                      Navigator.of(context).pop();
                                                      
                                                    },
                                                    child: Row(
                                                      children: [
                                                        SizedBox(
                                                          width: mediaQuerry
                                                                  .size.width *
                                                              0.06,
                                                        ),
                                                        Icon(
                                                          Icons.favorite,
                                                          size: 30,
                                                          color: Colors.red,
                                                        ),
                                                        SizedBox(
                                                          width: mediaQuerry
                                                                  .size.width *
                                                              0.05,
                                                        ),
                                                        Text('remove from favorite',
                                                            style: TextStyle(
                                                              color: Colormanager.sheetText,
                                                              fontWeight:
                                                                  FontWeight.bold,
                                                              fontSize: 20,
                                                            ))
                                                      ],
                                                    ),
                                                  ):InkWell(
                                                    onTap: (){
                                                      addlikedSong(items.data![index].songid);
                                                      ifLickd();
                                                      setState(() {
                                                        
                                                      });
                                                      Navigator.of(context).pop();
                                                      
                                                    },
                                                    child: Row(
                                                      children: [
                                                        SizedBox(
                                                          width: mediaQuerry
                                                                  .size.width *
                                                              0.06,
                                                        ),
                                                        Icon(
                                                          Icons.favorite_border,
                                                          size: 30,
                                                          color: Colors.red, 
                                                          
                                                        ),
                                                        SizedBox(
                                                          width: mediaQuerry
                                                                  .size.width *
                                                              0.05,
                                                        ),
                                                        Text('Add to favorite',
                                                            style: TextStyle(
                                                              color: Colormanager.sheetText,
                                                              fontWeight:
                                                                  FontWeight.bold,
                                                              fontSize: 20,
                                                            ))
                                                      ],
                                                    ),
                                                  ),
                                                ],
                                              ),
                                            ),
                                          );
                                        });
                                  },
                                  child: Image.asset(
                                    'assets/more.png',
                                    color: Colors.white,
                                    height: 25,
                                    width: 25,
                                  )),
                              onTap: () {
                                VisibilityManager.isVisible =true;

                                // for my song container ,

                                context
                                    .read<SongModelProvider>()
                                    .setId(items.data![index].songid);
                                context
                                    .read<SongModelProvider>(),
                                    .updateCurrentSong(items.data![index]);

                                    MusicModel selectedsong=items.data![index];
                                    int selectedIndex=index;
                                    List<MusicModel>songlist=items.data!;

                                Navigator.of(context).push(PageTransition(
                                  type: PageTransitionType.bottomToTop,
                                  childCurrent: widget,
                                  duration:Duration(milliseconds: 200),

                                   child:  Nowplaying(
                                          musicModel: items.data![index],
                                          index: index,
                                          songmodel: items.data!,
                                          
                                          
                                        )));
                                playSong(items.data![index].uri);
                              },
                            ),
                          ),
                        );
                      },
                      itemCount: items.data!.length,
                    ),
                  ),
                );
              }
            },
          ),
        ],
      ),
    );
  }
}// database_helper.dart
import 'package:hive/hive.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'recently_played_model.dart';

Future<void> initializeHive() async {
  await Hive.initFlutter();
}

Future<void> openRecentlyPlayedBox() async {
  await Hive.openBox<RecentlyPlayed>('recentlyPlayedBox');
}

Future<void> addSongToRecentlyPlayed(String songId, String name) async {
  final recentlyPlayedBox = await Hive.openBox<RecentlyPlayed>('recentlyPlayedBox');

  // Check if the same song is already in the recently played list
  final existingSong = recentlyPlayedBox.values.firstWhere(
    (song) => song.songId == songId && song.name == name,
    orElse: () => null,
  );

  // If the song is already in the list, move it to the top
  if (existingSong != null) {
    existingSong.name = name;
    recentlyPlayedBox.put(existingSong.key, existingSong);
  } else {
    // If the song is not in the list, add it
    final recentlyPlayed = RecentlyPlayed(songId: songId, name: name);
    recentlyPlayedBox.add(recentlyPlayed);
  }
}

Future<void> deleteSongFromRecentlyPlayed(String songId, String name) async {
  final recentlyPlayedBox = await Hive.openBox<RecentlyPlayed>('recentlyPlayedBox');

  // Find and delete the song from the recently played list
  final songToDelete = recentlyPlayedBox.values.firstWhere(
    (song) => song.songId == songId && song.name == name,
    orElse: () => null,
  );

  if (songToDelete != null) {
    await recentlyPlayedBox.delete(songToDelete.key);
  }
}

Future<Box<RecentlyPlayed>> getRecentlyPlayedBox() async {
  return await Hive.openBox<RecentlyPlayed>('recentlyPlayedBox');
}





//////////  
///
///
///// re func 
   
import 'package:galaxy/recently/recent.dart';
import 'package:hive_flutter/hive_flutter.dart';


final  String _boxName = 'recent';

Future <void> addRecentlyplayedSong(int songId,String  name ,String artistname) async{
  final box= await Hive.openBox<Recentmodel>(_boxName);
  final recentlyplayedsong=Recentmodel(songId: songId, name: name ,artistname: artistname); 
    int currentindex=box.values.toList().indexWhere((song) => song.songId==songId);
    if(currentindex!=-1){
      box.putAt(currentindex, recentlyplayedsong);
    }else{
      box.add(recentlyplayedsong);
    }

    if(box.length>10){
      box.delete(10);
    }
   

}


Future <List<Recentmodel>> getallrecentSong()async{
  final box=await Hive.openBox<Recentmodel>(_boxName);
  return box.values.toList().reversed.toList(); 
}


Future <void> deleteRecentSong(int songId)async{
  final box=await Hive.openBox<Recentmodel>(_boxName); 
  final indexToDelete= box.values.toList().indexWhere((song) => song.songId==songId);
  if(indexToDelete!=-1){
    box.deleteAt(indexToDelete); 
  }
}

//// re page 
///
///import 'package:flutter/material.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:galaxy/Screens/nowplaying.dart';
import 'package:galaxy/colors/colors.dart';
import 'package:galaxy/database/db_model.dart';
import 'package:galaxy/provider/provider.dart';


import 'package:galaxy/recently/recent.dart';
import 'package:galaxy/recently/refunction.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:on_audio_query/on_audio_query.dart';
import 'package:provider/provider.dart';

  


class RecentlyPlayed extends StatefulWidget {
 const  RecentlyPlayed({super.key, });


 

  

  @override
  State<RecentlyPlayed> createState() => _RecentlyPlayedState();
}

class _RecentlyPlayedState extends State<RecentlyPlayed> {
  List<Recentmodel> recentSongs = [];

  @override
  void initState() {
    loadRecentlyplayedsongs();

    // TODO: implement initState
    super.initState();
  }

  void loadRecentlyplayedsongs() async {
    recentSongs = await getallrecentSong();
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    MediaQueryData mediaQuerry = MediaQuery.of(context);
    return SafeArea(
        child: Scaffold(
          backgroundColor: Colormanager.scaffoldcolor,
      body: Column(
        children: [
          Container(
            height: mediaQuerry.size.height * 0.2,
            decoration: BoxDecoration(
                color: Colormanager.container,
                borderRadius: const BorderRadius.only(
                    bottomLeft: Radius.circular(50),
                    bottomRight: Radius.circular(50))),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Padding(
                  padding: const EdgeInsets.all(10),
                  child: GestureDetector(
                      onTap: () {
                        Navigator.of(context).pop();
                      },
                      child: const FaIcon(
                        FontAwesomeIcons.circleArrowLeft,
                        color: Colors.white,
                      )),
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Text(
                      'Recently Played ',
                      style: GoogleFonts.lato(
                          color: Colormanager.titleText,
                          fontWeight: FontWeight.bold,
                          fontSize: 20),
                    )
                  ],
                )
              ],
            ),
          ),
          Expanded(
            child: ListView.builder(

              itemCount: recentSongs.length,
              itemBuilder: (context, index) {
            
              return Padding(
                padding: const EdgeInsets.all(8.0),
                child: Container(
                  color: Colormanager.listtile,
                  child: ListTile(
                    
                  
                    leading: QueryArtworkWidget(
                        id: recentSongs[index].songId, type: ArtworkType.AUDIO),
                    title: Text(recentSongs[index].name),
                    subtitle: Text(recentSongs[index].artistname),


                    onTap: (){
                        

                      Navigator.of(context).push(MaterialPageRoute(builder: (context)=>Nowplaying(musicModel:, index: index, songmodel: recentSongs)));
                    },
                  ),
                ),
              );
            }),
          ),
        ],
      ),
    ));
  }
}

//// playlist functions 
  



  // Import necessary packages
import 'package:hive/hive.dart';

// Step 1: Create a Hive box for playlists
class Playlist {
  final String name;
  final List<String> songs;

  Playlist(this.name, this.songs);
}

// Step 2: Initialize Hive and open the box
void initializeDatabase() async {
  await Hive.initFlutter();
  await Hive.openBox<Playlist>('playlists');
}

// Step 3: Function to add a new playlist
void addPlaylist(String name) async {
  var box = await Hive.openBox<Playlist>('playlists');
  var playlist = Playlist(name, []);
  await box.add(playlist);
}

// Step 4: Function to get all playlists
Future<List<Playlist>> getAllPlaylists() async {
  var box = await Hive.openBox<Playlist>('playlists');
  return box.values.toList();
}

// Step 5: Function to add songs to a playlist
void addSongsToPlaylist(String playlistName, List<String> songs) async {
  var box = await Hive.openBox<Playlist>('playlists');
  var playlist = box.values.firstWhere((p) => p.name == playlistName);
  playlist.songs.addAll(songs);
  await box.put(playlist.key, playlist);
}

// Step 6: Function to delete a playlist
void deletePlaylist(String playlistName) async {
  var box = await Hive.openBox<Playlist>('playlists');
  var playlist = box.values.firstWhere((p) => p.name == playlistName);
  await box.delete(playlist.key);
}

// Step 7: Function to edit a playlist name
void editPlaylistName(String oldName, String newName) async {
  var box = await Hive.openBox<Playlist>('playlists');
  var playlist = box.values.firstWhere((p) => p.name == oldName);
  playlist.name = newName;
  await box.put(playlist.key, playlist);
}




 


    